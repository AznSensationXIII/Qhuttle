package com.qualsome.qhuttledriver;

import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import android.app.ActionBar;
import android.app.Activity;
import android.app.ProgressDialog;
import android.app.ActionBar.Tab;
import android.app.FragmentTransaction;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnCancelListener;
import android.support.v4.app.FragmentActivity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;

public class PassengerActivity extends FragmentActivity implements ActionBar.TabListener {
	
	private static final int LOCAL = 0;
	private static final int POTENTIAL = 1;
	
	private LocalFragment localFrag;
	private PotentialFragment potentialFrag;
	
	private ArrayList<PotentialListData> potentialList;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_passenger);
		// Show the Up button in the action bar.
		setupActionBar();
		
		localFrag = new LocalFragment();
		potentialFrag = new PotentialFragment();
		
		potentialList = new ArrayList<PotentialListData>();
		
		ActionBar action = getActionBar();
		action.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
		action.addTab(action.newTab().setText("Local").setTabListener(this));
		action.addTab(action.newTab().setText("Potential").setTabListener(this));
		
		android.support.v4.app.FragmentTransaction trans =
			getSupportFragmentManager().beginTransaction();
		trans.add(R.id.passenger_container, localFrag, "local");
		trans.add(R.id.passenger_container, potentialFrag, "potential");
		trans.commit();
	}
	
	private void setupActionBar() {

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.passenger, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onTabSelected(Tab tab, FragmentTransaction ft) {

		android.support.v4.app.FragmentTransaction trans = getSupportFragmentManager().beginTransaction();
		switch (tab.getPosition())
		{
		case LOCAL:
			trans.hide(potentialFrag);
			trans.show(localFrag);
			trans.commit();
			break;
		case POTENTIAL:
			trans.hide(localFrag);
			trans.show(potentialFrag);
			trans.commit();
			break;
		}
		
	}

	@Override
	public void onTabUnselected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onTabReselected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub
		
	}
	
	private static class Refresh extends AsyncTask<Integer, Integer, Integer>
	{
		private static final int OK = 0;
		private static final int UNKNOWN = 1;
		private static final int NETWORK_ERROR = 2;
		
		private Activity activity;
		private volatile boolean running;
		
		public Refresh(Activity act)
		{
			activity = act;
			running = true;
		}
		
		protected void onPreExecute()
		{
		}
		
		protected void onCancelled()
		{
			running = false;
		}
		
		@Override
		protected Integer doInBackground(Integer... params)
		{
			while (running)
			{
				try
				{
					String str = "http://54.213.39.1:8000/dispatcher/refresh/";
					URL url = new URL(str);
					HttpURLConnection conn = (HttpURLConnection) url.openConnection();
					conn.setRequestMethod("GET");
					
					Type listType = new TypeToken<ArrayList<PotentialListData>>(){}.getType();
					ArrayList<PotentialListData> list = new ArrayList<PotentialListData>();
					list = new Gson().fromJson(new InputStreamReader
							(conn.getInputStream()), listType);
					
					if (conn.getResponseCode() != 200)
						return UNKNOWN;
					return OK;
				}
				catch (Exception e)
				{
					Log.e("Error", e.toString());
					return NETWORK_ERROR;
				}
			}
			return NETWORK_ERROR;
		}
		
		protected void onPostExecute(Integer result)
		{
			progress.dismiss();
			
			if (result == OK)
			{
				Intent intent = new Intent(activity, PassengerActivity.class);
				activity.startActivity(intent);
				activity.finish();
			}
		}
	}

}
